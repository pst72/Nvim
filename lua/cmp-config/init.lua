-- Setup nvim-cmp.
-- vim.g.completeopt = 'menu,menuone,noselect,noinsert'
-- local has_words_before = function()
-- local line, col = unpack(vim.api.nvim_win_get_cursor(0))
-- return col ~= 0 and vim.api.nvim_buf_get_lines(0, line - 1, line, true)[1]:sub(col, col):match("%s") == nil
-- end

-- local feedkey = function(key, mode)
-- vim.api.nvim_feedkeys(vim.api.nvim_replace_termcodes(key, true, true, true), mode, true)
-- end
-- local cmp = require'cmp'
-- local lspkind = require'lspkind'
-- local capabilities = require'cmp_nvim_lsp'.update_capabilities(vim.lsp.protocol.make_client_capabilities())

-- cmp.setup({
-- snippet = {
-- REQUIRED - you must specify a snippet engine
-- expand = function(args)
-- vim.fn["vsnip#anonymous"](args.body) -- For `vsnip` users.
-- require('luasnip').lsp_expand(args.body) -- For `luasnip` users.
-- vim.fn["UltiSnips#Anon"](args.body) -- For `ultisnips` users.
-- require'snippy'.expand_snippet(args.body) -- For `snippy` users.
-- end,
-- },
-- mapping = {
-- ['<C-p>'] = cmp.mapping(cmp.mapping.scroll_docs(-4), { 'i', 'c' }),
-- ['<C-n>'] = cmp.mapping(cmp.mapping.scroll_docs(4), { 'i', 'c' }),
-- ['<C-Space>'] = cmp.mapping(cmp.mapping.complete(), { 'i', 'c' }),
-- ['<C-y>'] = cmp.config.disable, -- Specify `cmp.config.disable` if you want to remove the default `<C-y>` mapping.
-- ['<C-e>'] = cmp.mapping({i = cmp.mapping.abort(), c = cmp.mapping.close()}),
-- ['<Tab>'] = cmp.mapping(function(fallback)
-- if cmp.visible() then
-- cmp.select_next_item()
-- elseif vim.fn["vsnip#available"]() == 1 then
-- vim.fn.feedkey("<Plug>(vsnip-expand-or-jump)", "")
-- elseif has_words_before() then
-- cmp.complete()
-- else
-- fallback() -- The fallback function sends a already mapped key. In this case, it's probably `<Tab>`.
-- end
-- end, { "i", "s" }),

-- ['<S-Tab>'] = cmp.mapping(function()
-- if cmp.visible() then
-- cmp.select_prev_item()
-- elseif vim.fn["vsnip#jumpable"](-1) == 1 then
-- vim.fn.feedkey("<Plug>(vsnip-jump-prev)", "")
-- end
-- end, { "i", "s" }),

-- Accept currently selected item. If none selected, `select` first item.
-- Set `select` to `false` to only confirm explicitly selected items.
-- ['<CR>'] = cmp.mapping.confirm({ select = true }),
-- },

-- sources = cmp.config.sources({
--   { name = 'nvim_lsp' },
--   { name = 'vsnip' }, -- For vsnip users.
--   { name = 'vim-vsnip' }, -- For vim-vsnip users.
--   { name = 'vim-vsnip-integ' }, -- For vim-vsnip users.
-- { name = 'luasnip' }, -- For luasnip users.
-- { name = 'ultisnips' }, -- For ultisnips users.
-- { name = 'snippy' }, -- For snippy users.
--       { name = 'buffer' },
--       { name = 'path' },
--       { name = 'cmdline' },
--       { name = 'nvim-lua' },
--     }),
--
--     formatting = {
--       format = lspkind.cmp_format({with_text = true, maxwidth = 50, menu = {buffer = "[Buf]", nvim_lsp = "[LSP]", dictionary = "[Dict]", vsnip = "[Vsnip]"}})
--      },
--
--      -- Use buffer source for `/` (if you enabled `native_menu`, this won't work anymore).
--     cmp.setup.cmdline('/', {
--       sources = {
--         { name = 'buffer' }
--       }
--      }),
--
--      -- Use cmdline & path source for ':' (if you enabled `native_menu`, this won't work anymore).
--     cmp.setup.cmdline(':', {
--       sources = cmp.config.sources({
--         { name = 'path' },
--       }, {
--         { name = 'cmdline' }
--       })
--      }),
--   })
--    -- Setup lspconfig.
--    -- Replace <YOUR_LSP_SERVER> with each lsp server you've enabled.
--   require'lspconfig'.html.setup {
--     capabilities = capabilities
--   }
--   require'lspconfig'.lua.setup {
--     capabilities = capabilities
--   }
--   require'lspconfig'.css.setup {
--     capabilities = capabilities
--   }
--   require'lspconfig'.python.setup {
--     capabilities = capabilities
--   }
-- require'lspconfig'.javascript.setup {
--   capabilities = capabilities
-- }
